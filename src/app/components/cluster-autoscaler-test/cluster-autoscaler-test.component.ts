import { Component, OnInit, OnDestroy, ViewChild } from '@angular/core';
import { forkJoin, Subscription } from 'rxjs';
import { JobParameters } from 'src/app/models/job-parameters.model';
import { EventItem } from 'src/app/models/event-item.model';
import { FibonacciJobService } from 'src/app/services/fibonacci-job.service';
import { ClusterService } from 'src/app/services/cluster.service';
import { JobParametersFormComponent } from 'src/app/components/cluster-autoscaler-test/job-parameters-form.component';
import { LoadingPopupService } from 'src/app/services/loading-popup.service';
import { BlankPopupService } from 'src/app/services/blank-popup.service';

@Component({
  selector: 'cluster-autoscaler-test',
  templateUrl: './cluster-autoscaler-test.component.html'
})
export class ClusterAutoscalerTestComponent implements OnInit, OnDestroy {

  //#region Model Properties

  /**
   * The number of fibonacci jobs running in the cluster.
   * It can be either 0 or 1 by design of the application. 
   */
  public jobCount: number = 0;

  /**
   * The parameters used to execute the fibonacci job.
   */
  public jobParameters: JobParameters = new JobParameters();
  
  /**
   * The number of machines present in the cluster.
   */
  public machineCount: number = 0;
  private previousMachineCount: number = 0;

  /**
   * The CPU and memory metrics of the machines present in the cluster.
   */
  public clusterStatus: string = "";

  /**
   * The status of the fibonacci horizontal pod autoscaler (HPA).
   */
  public hpaStatus: string = "";

  /**
   * The last date and time when the displayed data was refreshed.
   */
  public lastUpdate: Date = new Date();

  /**
   * The list of events generated by the application.
   */
  public eventList: EventItem[] = [];

  //#endregion

  //#region Other Properties

  // Used to update the form controls and receive events from them.
  @ViewChild(JobParametersFormComponent, { static: true })
  private jobParametersForm: JobParametersFormComponent;

  // Flag that indicates that the initialization phase is over.
  private isInitialized: boolean = false;

  // Subscription used to refresh the component data every 5 seconds.
  private refreshSubscription: Subscription;

  // The id of the timer used to refresh the data every 5 seconds.
  private refreshTimeoutId: any;

  // Injected Properties
  public constructor(
    private jobService: FibonacciJobService,
    private clusterService: ClusterService,
    private loadingPopup: LoadingPopupService,
    private blankPopup: BlankPopupService
  ) { }

  //#endregion

  //#region Initialization

  /**
   * An Angular callback executed during component initialization.
   */
  public ngOnInit(): void {
    this.initialize();
    this.refresh();
  }

  // Determines whether the job is already running (jobCount == 1)
  // and updates the job parameters accordingly. 
  private async initialize(): Promise<void> {
    this.blankPopup.show();
    this.loadingPopup.show();

    this.jobCount = await this.jobService.getCount();
    if (this.jobCount == 1) {
      this.jobParameters = await this.jobService.getParameters();
    } else {
      this.jobParameters = new JobParameters(2000, 20);
    }
    this.jobParametersForm.setJobParameters(this.jobParameters);
  }

  //#endregion

  //#region Refresh

  // Calls all the kubernetes-api endpoints and wait for all of them.
  // Then display the data in the component and repeats the process within 
  // the next five seconds.
  private refresh() {
    this.refreshSubscription =
      forkJoin(
        this.jobService.getCount(),
        this.clusterService.getHpaStatus(),
        this.clusterService.getMachineCount(),
        this.clusterService.getStatus()
      ).subscribe(
        data  => { this.refreshData(data); },
        error => { },
        ()    => {
          this.refreshSubscription.unsubscribe();
          this.refreshTimeoutId = setTimeout(() => this.refresh(), 5000); }
      );
  }

  // Refresh the data with the results of the kubernetes-api service calls.
  private refreshData([jobCount, hpaStatus, machineCount, clusterStatus]): void {
    this.previousMachineCount = this.machineCount;
    this.jobCount = jobCount;
    this.hpaStatus = hpaStatus;
    this.machineCount = machineCount;
    this.clusterStatus = clusterStatus;
    this.lastUpdate = new Date();
    this.detectClusterChanges();
    this.completeInitialize();
  }

  // Detects if several machines have been added or removed from the
  // cluster and appends a new event to the event list.
  private detectClusterChanges(): void {
    if (!this.isInitialized) return;

    if (this.machineCount > this.previousMachineCount) {
      let difference = this.machineCount - this.previousMachineCount;
      let message = "(" + difference + ") nodes were added to the cluster."
      this.addEvent(message);

    } else if (this.machineCount < this.previousMachineCount) {
      let difference = this.previousMachineCount - this.machineCount;
      let message = "(" + difference + ") nodes were removed from the cluster."
      this.addEvent(message);
    }
  }

  // Hides the blank and loading popups if this is the first time
  // this method is called. 
  private completeInitialize() {
    if (!this.isInitialized) {
      this.blankPopup.hide();
      this.loadingPopup.hide();
      this.isInitialized = true;
    }
  }

  //#endregion

  //#region Events

  /**
   * Starts a new fibonacci job in the cluster to test the
   * cluster autoscaler feature on AWS.
   * @param parameters The parameters sent to the fibonacci job.
   */
  public async onJobStarted(parameters: JobParameters): Promise<void> {
    try {
      this.loadingPopup.show();
      await this.jobService.start(this.jobParameters);
      this.jobCount = await this.jobService.getCount();
      this.addEvent("Job started");
    } finally {
      this.loadingPopup.hide();
    }
  }

  /**
   * Stops the currently executing fibonnacci job in the cluster.
   */
  public async onJobStopped(): Promise<void> {
    try {
      this.loadingPopup.show();
      await this.jobService.stop();
      this.jobCount = await this.jobService.getCount();
      this.addEvent("Job stopped");
    } finally {
      this.loadingPopup.hide();
    }
  }

  // Appends a new event to the event list.
  private addEvent(message: string): void {
    let event = new EventItem(message);
    this.eventList.push(event);
  }

  //#endregion

  //#region Destruction

  /**
   * An Angular callback executed when the component is deallocated.
   */
  public ngOnDestroy(): void {
    this.stopRefresh();
  }

  // Stops the refresh timeout and it unsubscribes from the refresh subscription.
  private stopRefresh(): void {
    if (this.refreshTimeoutId) clearTimeout(this.refreshTimeoutId);
    if (this.refreshSubscription) this.refreshSubscription.unsubscribe();
  }

  //#endregion

}